{"version":3,"sources":["components/Todo.js","components/TodoList.js","components/TodoForm.js","App.js","index.js"],"names":["Todo","props","className","todo","completed","onClick","toggleItem","id","task","TodoList","todoData","map","key","clearItem","TodoForm","handleChange","e","setState","item","target","value","console","log","name","submitItem","preventDefault","addItem","state","onSubmit","this","type","placeholder","onChange","React","Component","App","itemId","newItem","Date","now","filter","ReactDOM","render","document","getElementById"],"mappings":"2NAgBeA,EAbF,SAAAC,GAET,OACI,yBACAC,UAAS,cAASD,EAAME,KAAKC,UAAY,aAAe,IACxDC,QAAS,kBAAMJ,EAAMK,WAAWL,EAAME,KAAKI,MAE3C,2BAAIN,EAAME,KAAKK,QCcRC,EAlBE,SAAAR,GAEb,OACA,yBAAKC,UAAU,aACVD,EAAMS,SAASC,KAAI,SAAAR,GAAI,OACtB,kBAAC,EAAD,CAAMS,IAAKT,EAAKI,GAAIJ,KAAMA,EAAMG,WAAYL,EAAMK,gBAIpD,4BAAQJ,UAAU,YAAYG,QAASJ,EAAMY,WAA7C,WCwBOC,G,wDAnCX,aAAc,IAAD,8BACT,gBAMJC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAACC,KAAMF,EAAEG,OAAOC,QAC9BC,QAAQC,IAAIN,EAAEG,OAAOI,OATZ,EAYdC,WAAa,SAAAR,GACTA,EAAES,iBACF,EAAKxB,MAAMyB,QAAQ,EAAKC,MAAMT,MAC9B,EAAKD,SAAS,CAAEC,KAAM,MAbrB,EAAKS,MAAQ,CACTT,KAAM,IAHD,E,0CAkBb,WACI,OACI,0BAAMhB,UAAU,WAAW0B,SAAUC,KAAKL,YAEvC,2BACEM,KAAK,OACLC,YAAY,eACZR,KAAK,OACLH,MAAOS,KAAKF,MAAMT,KAClBc,SAAUH,KAAKd,eAEjB,4BAAQb,UAAU,OAAlB,Y,GA/BQ+B,IAAMC,YCGvBxB,EAAW,CACf,CACEF,KAAM,kBACND,GAAI,cACJH,WAAW,GAEb,CACEI,KAAM,mBACND,GAAI,cACJH,WAAW,GAGb,CACEI,KAAM,iBACND,GAAI,cACJH,WAAW,IA8EA+B,E,kDArEd,aAAe,IAAD,8BACZ,gBAMF7B,WAAa,SAAA8B,GACXf,QAAQC,IAAIc,GAOX,EAAKnB,SAAS,CAEZP,SAAU,EAAKiB,MAAMjB,SAASC,KAAI,SAAAO,GAChC,OAAIkB,IAAWlB,EAAKX,GACX,2BAEFW,GAFL,IAGEd,WAAYc,EAAKd,YAIdc,QA1BA,EAgCXQ,QAAU,SAAAR,GACR,IAAMmB,EAAU,CACd7B,KAAMU,EACNX,GAAI+B,KAAKC,MACTnC,WAAW,GAEb,EAAKa,SAAS,CACZP,SAAS,GAAD,mBAAM,EAAKiB,MAAMjB,UAAjB,CAA2B2B,OAvC5B,EA2CXxB,UAAY,SAAAG,GACVA,EAAES,iBACF,EAAKR,SAAS,CACZP,SAAU,EAAKiB,MAAMjB,SAAS8B,QAAO,SAAAtB,GAAI,OAAKA,EAAKd,gBA5CxD,EAAKuB,MAAQ,CACVjB,YAHS,E,0CAkDb,WACE,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,UACb,0CACA,kBAAC,EAAD,CAAUwB,QAASG,KAAKH,WAE1B,kBAAC,EAAD,CACAhB,SAAUmB,KAAKF,MAAMjB,SACrBJ,WAAYuB,KAAKvB,WACjBO,UAAWgB,KAAKhB,iB,GAjENoB,IAAMC,WCpBxBO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.863a830f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Todo = props => {\r\n    \r\n    return (\r\n        <div \r\n        className={`item${props.todo.completed ? \" completed\" : \"\"}`}\r\n        onClick={() => props.toggleItem(props.todo.id)}\r\n        >\r\n        <p>{props.todo.task}</p>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","// your components will all go in this `component` directory.\r\n// feel free to change this component.js into TodoList.js\r\n\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = props => {\r\n\r\n    return (\r\n    <div className=\"todo-list\">\r\n        {props.todoData.map(todo => (\r\n          <Todo key={todo.id} todo={todo} toggleItem={props.toggleItem} />\r\n        ))\r\n        \r\n        }\r\n        <button className=\"clear-btn\" onClick={props.clearItem}>\r\n        CLEAR\r\n      </button>\r\n       \r\n\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\n\r\nclass TodoForm extends React.Component {\r\n    // constructor with state\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            item: \"\"\r\n        };\r\n    }\r\n\r\n    handleChange = e => {\r\n        this.setState({item: e.target.value})\r\n        console.log(e.target.name)\r\n    }\r\n\r\n   submitItem = e => {\r\n       e.preventDefault();\r\n       this.props.addItem(this.state.item);\r\n       this.setState({ item: \"\" });\r\n   }\r\n\r\n    render(){\r\n        return (\r\n            <form className=\"add-task\" onSubmit={this.submitItem}>\r\n            \r\n               <input\r\n                 type='text'\r\n                 placeholder=\"Enter a task\"\r\n                 name='item'\r\n                 value={this.state.item}\r\n                 onChange={this.handleChange}\r\n               />\r\n               <button className=\"add\">Add</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\nimport TodoList from \"./components/TodoList\";\r\nimport \"./App.css\";\r\nimport TodoForm from \"./components/TodoForm\";\r\n\r\nconst todoData = [\r\n  {\r\n    task: 'Organize Garage',\r\n    id: 1528817077286,\r\n    completed: false\r\n  },\r\n  {\r\n    task: 'Feeding the baby',\r\n    id: 1528817084358,\r\n    completed: false\r\n  },\r\n\r\n  {\r\n    task: 'Finish Project',\r\n    id: 1528817084359,\r\n    completed: false\r\n  }\r\n];\r\n\r\nclass App extends React.Component {\r\n  // you will need a place to store your state in this component.\r\n  // design `App` to be the parent component of your application.\r\n  // this component is going to take care of state, and any change handlers you need to work with your state\r\n \r\n constructor() {\r\n   super();\r\n   this.state = {\r\n      todoData // same as === todoData: todoData\r\n   };\r\n }\r\n//  Class methods to update state\r\n toggleItem = itemId => {\r\n   console.log(itemId);\r\n\r\n  // // In the todoList array, find the item that was clicked\r\n    // (looking for the item with itemId)\r\n    // Toggle the completed field on that item\r\n    // Return all other items untouched\r\n\r\n    this.setState({\r\n      // Build a new state object each time\r\n      todoData: this.state.todoData.map(item => {\r\n        if (itemId === item.id) {\r\n          return {\r\n            // return the item with 'completed' field toggled\r\n            ...item, \r\n            completed: !item.completed\r\n            \r\n          };\r\n        }\r\n        return item;\r\n        \r\n      })\r\n    })\r\n }\r\n    //  Class method to add a grocery item\r\n    addItem = item => {\r\n      const newItem = {\r\n        task: item,\r\n        id: Date.now(),\r\n        completed: false\r\n      };\r\n      this.setState({\r\n        todoData: [...this.state.todoData, newItem]\r\n      });\r\n    }\r\n\r\n    clearItem = e => {\r\n      e.preventDefault();\r\n      this.setState({\r\n        todoData: this.state.todoData.filter(item => !item.completed)\r\n      });\r\n    };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"header\">\r\n          <h1> Todo App!</h1>\r\n          <TodoForm addItem={this.addItem}/>\r\n        </div>\r\n        <TodoList \r\n        todoData={this.state.todoData} \r\n        toggleItem={this.toggleItem}\r\n        clearItem={this.clearItem}\r\n        />\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}